#!/usr/bin/env python
import rospy
import RPi.GPIO as GPIO
import numpy as np
import time
import pigpio
from sensor_msgs.msg import JointState

msg = JointState()
pi = pigpio.pi()

diff_T = 0
diff_S = 0
diff_A = 0

diffT = 0
diffS = 0
diffA = 0

last_tick_T = None
last_tick_S = None
last_tick_A = None

error_1 = 0

cuenta = 0

class RC(object):

        def __init__(self):
                self.pub = rospy.Publisher('/PWM', JointState, queue_size=10)

                # Variables
                self.st = 0
                self.ax = 0
                self.th = 0
                self.refT = 1535
                self.refS = 1535

		self.signal = [103.431078067015 ,
108.286823349859 ,
111.996062731667 ,
114.757715023798 ,
117.300722895921 ,
120.500310955017 ,
124.948059318856 ,
130.635935841121 ,
136.869783795397 ,
142.443847012277 ,
146.015137987217 ,
146.547349213482 ,
143.671812629709 ,
137.843868919068 ,
130.244416820916 ,
122.462286380361 ,
116.063404378527 ,
112.184229387340 ,
111.270978026202 ,
113.031060500988 ,
116.590378561887 ,
120.786022450841 ,
124.489875491790 ,
126.863808811731 ,
127.485735324148 ,
126.340170152380 ,
123.715016272107 ,
120.070204379067 ,
115.936674108903 ,
111.872259875320 ,
108.460693742377 ,
106.310545911296 ,
106.006703262394 ,
107.990892031268 ,
112.389963475265 ,
118.852327978993 ,
126.473770489389 ,
133.880774126484 ,
139.492534413680 ,
141.916542515346 ,
140.371211795422 ,
134.997759305090 ,
126.938814208977 ,
118.123374163963 ,
110.789538436637 ,
106.868022529916 ,
107.408247537560 ,
112.231230156141 ,
119.934124688851 ,
128.265899889104 ,
134.775073258090 ,
137.537934730166 ,
135.741670417030 ,
129.935265543039 ,
121.862072301722 ,
113.920055621394 ,
108.416093008286 ,
106.849195080065 ,
109.450470075852 ,
115.126230726016 ,
121.820865458836 ,
127.180462391056 ,
129.301502521257 ,
127.323274583899 ,
121.676391228833 ,
113.914705489992 ,
106.195366053875 ,
100.585657234685 ,
98.4278267072935 ,
99.9675187909314 ,
104.357519090758 ,
110.019165589965 ,
115.223534642456 ,
118.684218534295 ,
119.956357803260 ,
119.510299852994 ,
118.466134975339 ,
118.095776381513 ,
119.280184477420 ,
122.122963648758 ,
125.863788346854 ,
129.126801192409 ,
130.418618020240 ,
128.700230057126 ,
123.828498797099 ,
116.705988782006 ,
109.077479272889 ,
103.032959184065 ,
100.378152876879 ,
102.079793524436 ,
107.968341539218 ,
116.794488553202 ,
126.617608012534 ,
135.394905349767 ,
141.576440935229 ,
144.514263017262 ,
144.561260303591 ,
142.842735721486 ,
140.793633706895 ,
139.629314370467 ,
139.933142878039 ,
141.496425952710 ,
143.453665462008 ,
144.651953945813 ,
144.113923113195 ,
141.425695851704 ,
136.912901867928 ,
131.546203714816 ,
126.614283920925 ,
123.282777556826 ,
122.194719522156 ,
123.250215571068 ,
125.638219313440 ,
128.105517282119 ,
129.368386144210 ,
128.527937193992 ,
125.354598975134 ,
120.356614090665 ,
114.622507912995 ,
109.500998221609 ,
106.228666045537 ,
105.621757772750 ,
107.914994295971 ,
112.772521950621 ,
119.437049580528 ,
126.944331573618 ,
134.323677685588 ,
140.729840098431 ,
145.493978645438 ,
148.121718703432 ,
148.286878391661 ,
145.861813024098 ,
140.993765976285 ,
134.196307645151 ,
126.395682650091 ,
118.869706046457 ,
113.046912263938 ,
110.187288762394 ,
111.023154918973 ,
115.475622574978 ,
122.560066461156 ,
130.547972797026 ,
137.373919973694 ,
141.190545526150 ,
140.911846504073 ,
136.571121619253 ,
129.364063379510 ,
121.339683548504 ,
114.813871746879 ,
111.675448717397 ,
112.799136623991 ,
117.755945867219 ,
124.923598907290 ,
131.974296600711 ,
136.594695759129 ,
137.214230371253 ,
133.510294380328 ,
126.526611430827 ,
118.363475008752 ,
111.535918779759 ,
108.203093252417 ,**
109.513520858421 ,
115.272478712307 ,
124.032098150716 ,
133.566959612515 ,
141.573839158555 ,
146.364955526789 ,
147.332089667269 ,
145.040637375405 ,
140.939528727757 ,
136.801539372271 ,
134.095292504567 ,
133.506464496910 ,
134.767113221559 ,
136.840109448817 ,
138.379901618310 ,
138.295071703593 ,
136.205214371894 ,
132.625267955785 ,
128.809528440677 ,
126.309924618374 ,
126.405646041084 ,
129.608053733479 ,
135.419784156501 ,
142.439051187848 ,
148.780192452394 ,
152.671322999466 ,
153.027767577793 ,
149.807112044526 ,
144.025488953402 ,
137.429364765670 ,
131.933031428976 ,
129.009572917682 ,
129.236248329750 ,
132.140397059306 ,
136.388868292613 ,
140.248544473039 ,
142.157264278514 ,
141.212755971442 ,
137.421447898149 ,
131.635779054946 ,
125.216750697431 ,
119.550271806325 ,
115.590331030389 ,
113.585353990884 ,
113.073993193279 ,
113.139038813216 ,
112.817860444064 ,
111.515932283679 ,
109.273375430897 ,
106.790142490626 ,
105.202435215449 ,
105.689968056851 ,
109.050613798813 ,
115.387197034874 ,
124.009776425648 ,
133.581996646339 ,
142.459156521995 ,
149.106514060803 ,
152.467941277403 ,
152.180955392576 ,
148.592219776409 ,
142.595130212239 ,
135.363669237648 ,
128.077215095324 ,
121.715498274002 ,
116.961306042306 ,
114.199955522503 ,
113.569347245659 ,
115.006021421248 ,
118.252427865962 ,
122.827641064606 ,
127.999530761321 ,
132.812800323581 ,
136.214353874643 ,
137.277965974550 ,
135.479317246673 ,
130.931937111122 ,
124.484310667348 ,
117.607834909676 ,
112.068721743422 ,
109.454267897885 ,
110.687265817329 ,
115.686080309888 ,
123.298615059290 ,
131.560855850831 ,
138.227689082929 ,
141.429086295356 ,
140.252003564271 ,
135.058651393499 ,
127.425790117919 ,
119.706119402615 ,
114.334730675680 ,
113.090437856249 ,
116.543231939149 ,
123.865714007353 ,
133.073612611386 ,
141.624193489108 ,
147.186054915397 ,
148.337850494225 ,
144.976041288748 ,
138.306016750524 ,**
130.426018766436 ,
123.644627265385 ,
119.756649158652 ,
119.511455351453 ,
122.439678419336 ,
127.082253098046 ,
131.531535917302 ,
134.092952481311 ,
133.840941536971 ,
130.885541905468 ,
126.270000860634 ,
121.548668244147 ,
118.203532747923 ,
117.109798528696 ,
118.238793321068 ,
120.699009246593 ,
123.094547566796 ,
124.067507910565 ,
122.826287034772 ,
119.467552766508 ,
114.973328246281 ,
110.879985786373 ,
108.732450015052 ,
109.513818765600 ,
113.251197727645 ,
118.939273238142 ,
124.814735078594 ,
128.894717522162 ,
129.602293695112 ,
126.272480017823 ,
119.372819069784 ,
110.368846320483 ,
101.283162005464 ,
94.0968686901256 ,
90.1901952233705 ,
90 ,
92.9936103216630 ,
97.9492377313841]

                self.valor = 0
                self.cuenta = 0

                # pins mode
                pi.set_mode(13, pigpio.OUTPUT)
                pi.set_mode(12, pigpio.OUTPUT)
                pi.set_mode(24, pigpio.INPUT)
                pi.set_mode(23, pigpio.INPUT)
                pi.set_mode(18, pigpio.INPUT)

                # hardware_PWM(gpio, PWMfreq, PWMduty)
                self.M1 = pi.hardware_PWM(12, 1000, 0)
                self.M2 = pi.hardware_PWM(13, 1000, 0)
                #self.rate = rospy.Rate(10)

        def stop(self, ax):
                x = 1

        def Throttle(self, th, st, ax):
                delta = th - self.refT
                if abs(delta) > 600:
                        th = self.refT

                delta = st - self.refS
                if abs(delta) > 600:
                        st = self.refS

                #Ecuaciones para linealizar y aplicar un PWM de 0 a 255
                RC1 = (2095-th)/1130.0 * 255
                RC2 = (1920-st)/795.0 * 255

                #Saturacion de a los motores
                if RC1 >= 255.0:
                        RC1 = 255.0

                if RC2 >= 255.0:
                        RC2 = 255.0

                if RC1 <= 0.0:
                        RC1 = 0.0

                if RC2 <= 0.0:
                        RC2 = 0.0

                #Aplicar PWM a los motores
                pi.set_PWM_dutycycle(13, RC1)
                pi.set_PWM_dutycycle(12, RC2)

                #Publicar mensaje
                #msg.velocity = [RC1,RC2]
                #msg.header.stamp = rospy.get_rostime()
                #self.pub.publish(msg)

                # update variables
                self.refT = th
                self.refS = st

                #print str(RC1) + "\t" + str(RC2)
                #print RC2

        def automatico(self, ax):
		global cuenta
                x = 1
                #pi.set_PWM_dutycycle(13, 82.0)
                #pi.set_PWM_dutycycle(12, self.signal[cuenta])
                        #time.sleep(0.5)
                cuenta = cuenta + 1

                print cuenta
		#print ax

if __name__== '__main__':

        while True:
                try:
                        rospy.init_node('remoto',anonymous=True, disable_signals=True)
                        cv = RC()

                        def Throttle(gpio, level, tick):
                                global last_tick_T, diff_T, diffT, diffS, diffA
                                if last_tick_T is not None:
                                        diff_T = pigpio.tickDiff(last_tick_T, tick)

                                        if diff_T < 3000 and diff_S < 3000 and diff_A < 3000:
                                                diffT = diff_T
                                                diffS = diff_S
                                                diffA = diff_A

                                if 1900 < diffA < 2100:
                                        cv.stop(diffA)

                                if 1400 < diffA < 1600:
                                        cv.Throttle(diffT, diffS, diffA)

                                if 900 < diffA < 1000:
                                        cv.automatico(diffA)

                                #if 900 < diffA < 1000:
                                #               cv.AX1(diffA)

                                # update the tick
                                last_tick_T = tick

                        def Steering(gpio, level, tick):
                                global last_tick_S, diff_S
                                if last_tick_S is not None:
                                        diff_S = pigpio.tickDiff(last_tick_S, tick)

                                last_tick_S = tick
                                #cv.Throttle(diff_S)

                        def AX1(gpio, level, tick):
                                global last_tick_A, diff_A, diffA
                                if last_tick_A is not None:
                                        diff_A = pigpio.tickDiff(last_tick_A, tick)

                                last_tick_A = tick
                                #cv.AX1(diff_A)

                        # Funciones que leen la senal a travez de callback
                        cb = pi.callback(23, pigpio.EITHER_EDGE, Throttle)
                        cb1 = pi.callback(18, pigpio.EITHER_EDGE, Steering)
                        cb2 = pi.callback(24, pigpio.EITHER_EDGE, AX1)

                        time.sleep(5)
                        cb.cancel()
                        cb1.cancel()
                        cb2.cancel()

                except rospy.ROSInterruptException:
                        #GPIO.cleanup()
                        print "closed"
                        pass

